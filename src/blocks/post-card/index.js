/**
 * CampaignBridge Post Card Block
 *
 * A versatile content container block for displaying post information in email campaigns.
 * This block serves as a wrapper for post-related content blocks (image, title, excerpt, CTA)
 * and provides post selection, linking, and styling capabilities.
 *
 * Features:
 * - Dynamic post selection from WordPress content
 * - Post type filtering and selection
 * - Optional link wrapper for entire card
 * - Inner blocks support for modular content composition
 * - Context provider for child blocks (post ID and type)
 * - Responsive design with border, shadow, and spacing support
 *
 * Use Cases:
 * - Featured post highlights in newsletters
 * - Post preview cards in email digests
 * - Content teasers with call-to-action buttons
 *
 * @module post-card
 */

import { InnerBlocks } from '@wordpress/block-editor';
import { registerBlockType } from '@wordpress/blocks';

import metadata from './block.json';
import Edit from './edit';

/**
 * Block metadata imported from block.json
 * @type {Object}
 */
export { metadata };

/**
 * Block name extracted from metadata
 * @type {string}
 */
export const { name } = metadata;

/**
 * Block settings configuration
 *
 * Defines the edit and save components for the post card block.
 *
 * @type {Object}
 * @property {Function} edit - The edit component for block editing
 * @property {Function} save - The save component that renders InnerBlocks content
 */
export const settings = {
  edit: Edit,
  /**
   * Save component for post card block
   *
   * Renders the InnerBlocks content placeholder for server-side rendering.
   * The actual HTML output is generated by the PHP render callback.
   *
   * @return {JSX.Element} InnerBlocks content placeholder
   */
  save() {
    return <InnerBlocks.Content />;
  },
};

/**
 * Initialize and register the post card block
 *
 * Registers the block with WordPress using the metadata and settings.
 * This function is called immediately to register the block on load.
 *
 * @return {void}
 */
export const init = () => registerBlockType({ name, ...metadata }, settings);

// Initialize the block immediately
init();
