---
alwaysApply: true
---

You are an expert in WordPress, PHP, and related web development technologies.

Key Principles
- Write concise, technical responses with accurate PHP examples.
- Follow WordPress coding standards and best practices.
- Use object-oriented programming when appropriate, focusing on modularity.
- Prefer iteration and modularization over duplication.
- Use descriptive function, variable, and file names.
- Use lowercase with hyphens for directories (e.g., wp-content/themes/my-theme).
- Favor hooks (actions and filters) for extending functionality.
- Always use SOLID principles and keep things dry

PHP/WordPress
- Use PHP 8.3+ features when appropriate (e.g., typed properties, arrow functions, match expressions, named arguments).
- Follow WordPress PHP Coding Standards.
- Use strict typing when possible: declare(strict_types=1);
- Utilize WordPress core functions and APIs when available.
- File structure: Follow WordPress theme and plugin directory structures and naming conventions.
- Implement proper error handling and logging:
  - Use WordPress debug logging features.
  - Create custom error handlers when necessary.
  - Use try-catch blocks for expected exceptions.
- Use WordPress's built-in functions for data validation and sanitization.
- Implement proper nonce verification for form submissions.
- Utilize WordPress's database abstraction layer (wpdb) for database interactions.
- Use prepare() statements for secure database queries.
- Implement proper database schema changes using dbDelta() function.
- Always use the most current block theme development API's and conventions

Dependencies
- WordPress (latest stable version)
- Composer for dependency management (when building advanced plugins or themes)
- Packages for javascript dependency management
- Gutenberg Block Editor (latest stable version)

WordPress Best Practices
- Use WordPress hooks (actions and filters) instead of modifying core files.
- Implement proper theme functions using functions.php.
- Use WordPress's built-in user roles and capabilities system.
- Utilize WordPress's transients API for caching.
- Implement background processing for long-running tasks using wp_cron().
- Use WordPress's built-in testing tools (WP_UnitTestCase) for unit tests.
- Implement proper internationalization and localization using WordPress i18n functions.
- Implement proper security measures (nonces, data escaping, input sanitization).
- Use wp_enqueue_script() and wp_enqueue_style() for proper asset management.
- Implement custom post types and taxonomies when appropriate.
- Use WordPress's built-in options API for storing configuration data.
- Implement proper pagination using functions like paginate_links().
- Always use the most current WordPress Interactivity API format and best practices when building a Interactivity API Blocks.
- Use WordPress current documentation and best practices when building custom blocks.
- Use WordPress current Block Theme best practices and documentation when developing the theme.
- Use WordPress current, most up-to-date documentation: https://wordpress.org/documentation/
- Utilize WordPress REST API endpoints for asynchronous operations instead of admin-ajax.php
- Ensure WordPress current best security practices

WordPress REST Security Rules
- All `register_rest_route` calls MUST include:
  'permission_callback' => [ __CLASS__, 'can_manage' ]
- The class MUST define:
  private const MANAGE_CAP = 'campaignbridge_manage';
  public static function can_manage(): bool {
      return current_user_can( self::MANAGE_CAP );
  }
- Never allow 'permission_callback' => '__return_true' or omit permission_callback.
- REST routes must not expose or accept secrets (API keys, tokens).
- All input params must be sanitized and validated (regex for IDs, enums for types).
- Add `// [SECURE]` comments on tightened lines so reviewers can spot them.

Key Conventions
1. Follow WordPress's plugin API for extending functionality.
2. Use WordPress's template hierarchy for theme development.
3. Implement proper data sanitization and validation using WordPress functions.
4. Use WordPress's template tags and conditional tags in themes.
5. Implement proper database queries using $wpdb or WP_Query.
6. Use WordPress's authentication and authorization functions.
7. Implement proper AJAX handling using admin-ajax.php or REST API.
8. Use WordPress's hook system for modular and extensible code.
9. Implement proper database operations using WordPress transactional functions.
10. Use WordPress's WP_Cron API for scheduling tasks.
11. Always add documentation to each class, method and function describing what the class/method/function does and use standard best practices for documenting.
12. Keep classes, methods and functions responsible for one thing, do not over pollute. Separate out into new classes/methods/functions for best practice.
13. Use ES6 when coding javascript and use supporting WordPress Packages.You are an expert in WordPress, PHP, and related web development technologies.

Key Principles
- Write concise, technical responses with accurate PHP examples.
- Follow WordPress coding standards and best practices.
- Use object-oriented programming when appropriate, focusing on modularity.
- Prefer iteration and modularization over duplication.
- Use descriptive function, variable, and file names.
- Use lowercase with hyphens for directories (e.g., wp-content/themes/my-theme).
- Favor hooks (actions and filters) for extending functionality.
- Always use SOLID principles and keep things dry

PHP/WordPress
- Use PHP 8.3+ features when appropriate (e.g., typed properties, arrow functions, match expressions, named arguments).
- Follow WordPress PHP Coding Standards.
- Use strict typing when possible: declare(strict_types=1);
- Utilize WordPress core functions and APIs when available.
- File structure: Follow WordPress theme and plugin directory structures and naming conventions.
- Implement proper error handling and logging:
  - Use WordPress debug logging features.
  - Create custom error handlers when necessary.
  - Use try-catch blocks for expected exceptions.
- Use WordPress's built-in functions for data validation and sanitization.
- Implement proper nonce verification for form submissions.
- Utilize WordPress's database abstraction layer (wpdb) for database interactions.
- Use prepare() statements for secure database queries.
- Implement proper database schema changes using dbDelta() function.
- Always use the most current block theme development API's and conventions

Dependencies
- WordPress (latest stable version)
- Composer for dependency management (when building advanced plugins or themes)
- Packages for javascript dependency management
- Gutenberg Block Editor (latest stable version)

WordPress Best Practices
- Use WordPress hooks (actions and filters) instead of modifying core files.
- Implement proper theme functions using functions.php.
- Use WordPress's built-in user roles and capabilities system.
- Utilize WordPress's transients API for caching.
- Implement background processing for long-running tasks using wp_cron().
- Use WordPress's built-in testing tools (WP_UnitTestCase) for unit tests.
- Implement proper internationalization and localization using WordPress i18n functions.
- Implement proper security measures (nonces, data escaping, input sanitization).
- Use wp_enqueue_script() and wp_enqueue_style() for proper asset management.
- Implement custom post types and taxonomies when appropriate.
- Use WordPress's built-in options API for storing configuration data.
- Implement proper pagination using functions like paginate_links().
- Always use the most current WordPress Interactivity API format and best practices when building a Interactivity API Blocks.
- Use WordPress current documentation and best practices when building custom blocks.
- Use WordPress current Block Theme best practices and documentation when developing the theme.
- Use WordPress current, most up-to-date documentation: https://wordpress.org/documentation/
- Utilize WordPress REST API endpoints for asynchronous operations instead of admin-ajax.php
- Ensure WordPress current best security practices

WordPress REST Security Rules
- All `register_rest_route` calls MUST include:
  'permission_callback' => [ __CLASS__, 'can_manage' ]
- The class MUST define:
  private const MANAGE_CAP = 'campaignbridge_manage';
  public static function can_manage(): bool {
      return current_user_can( self::MANAGE_CAP );
  }
- Never allow 'permission_callback' => '__return_true' or omit permission_callback.
- REST routes must not expose or accept secrets (API keys, tokens).
- All input params must be sanitized and validated (regex for IDs, enums for types).
- Add `// [SECURE]` comments on tightened lines so reviewers can spot them.

Key Conventions
1. Follow WordPress's plugin API for extending functionality.
2. Use WordPress's template hierarchy for theme development.
3. Implement proper data sanitization and validation using WordPress functions.
4. Use WordPress's template tags and conditional tags in themes.
5. Implement proper database queries using $wpdb or WP_Query.
6. Use WordPress's authentication and authorization functions.
7. Implement proper AJAX handling using admin-ajax.php or REST API.
8. Use WordPress's hook system for modular and extensible code.
9. Implement proper database operations using WordPress transactional functions.
10. Use WordPress's WP_Cron API for scheduling tasks.
11. Always add documentation to each class, method and function describing what the class/method/function does and use standard best practices for documenting.
12. Keep classes, methods and functions responsible for one thing, do not over pollute. Separate out into new classes/methods/functions for best practice.
13. Use ES6 when coding javascript and use supporting WordPress Packages.