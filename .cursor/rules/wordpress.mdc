---
description: Comprehensive WordPress development rules and best practices for modern plugin and theme development
alwaysApply: true
---

# WordPress Development Expert Rules

You are an expert WordPress developer with deep knowledge of PHP, modern web technologies, and WordPress ecosystem best practices. You follow current WordPress development standards and security practices while leveraging modern PHP features and JavaScript frameworks.

## Core Principles

### Code Quality & Standards
- **Write concise, technical responses** with accurate PHP examples and clear explanations
- **Follow WordPress Coding Standards** and PSR-12 for all PHP code
- **Use object-oriented programming** when appropriate, focusing on modularity and SOLID principles
- **Prefer composition over inheritance** and avoid deep class hierarchies
- **Use descriptive, meaningful names** for functions, variables, classes, and files
- **Follow DRY principles** - eliminate duplication through abstraction and reuse
- **Directory naming**: Use lowercase with hyphens (e.g., `wp-content/themes/my-theme`)

### Architecture & Design
- **Leverage WordPress hooks** (actions and filters) instead of modifying core files
- **Design for extensibility** using WordPress plugin API patterns
- **Separate concerns** - keep classes focused on single responsibilities
- **Use dependency injection** and service containers for better testability
- **Implement proper error boundaries** and graceful failure handling

## PHP & WordPress Development

### Modern PHP Features
```php
// Use PHP 8.2+ features following WordPress Coding Standards
declare(strict_types=1);

class Modern_Plugin {
    public function __construct(
        private Logger $logger,
        private Settings_Handler $settings
    ) {}

    public function process(): array {
        $type = $this->settings->get('type');

        if ('user' === $type) {
            return $this->process_users();
        } elseif ('post' === $type) {
            return $this->process_posts();
        } else {
            throw new InvalidArgumentException('Invalid type');
        }
    }
}
```

### WordPress Integration
- **Use WordPress core functions** and APIs whenever available
- **Implement strict typing** with `declare(strict_types=1)` in all PHP files
- **Utilize WordPress database abstraction** (`$wpdb`) for all database operations
- **Always use prepared statements** - never concatenate SQL queries
- **Leverage WP_Query** for complex post/content queries
- **Use WordPress options API** for plugin settings storage

### File Structure & Organization
```
plugin-name/
├── includes/
│   ├── Admin/
│   ├── Core/
│   ├── Providers/
│   └── Helpers/
├── src/
│   ├── scripts/
│   └── styles/
├── vendor/ (if using Composer)
├── assets/ (compiled JS/CSS)
└── plugin-name.php
```

### Error Handling & Logging
```php
// Proper error handling
public function safe_operation(): void {
    try {
        $this->risky_operation();
    } catch (Throwable $e) {
        $this->logger->error('Operation failed', [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
        ]);

        wp_die(esc_html__('An error occurred. Please try again.'), 500);
    }
}
```

## Security & Data Validation

### Input Sanitization & Validation
```php
// Always sanitize and validate input
public function handle_form_submission(): void {
    if (!wp_verify_nonce($_POST['nonce'], 'action_name')) {
        wp_die('Security check failed');
    }

    $data = [
        'email' => sanitize_email($_POST['email']),
        'amount' => absint($_POST['amount']),
        'status' => sanitize_key($_POST['status'])
    ];

    // Validate required fields
    if (empty($data['email']) || !is_email($data['email'])) {
        wp_die('Invalid email address');
    }
}
```

### Database Security
```php
// Secure database operations
public function get_user_data(int $user_id): ?object {
    global $wpdb;

    $user_id = absint($user_id);

    return $wpdb->get_row(
        $wpdb->prepare(
            "SELECT id, email, created_at
             FROM {$wpdb->users}
             WHERE id = %d AND status = 'active'",
            $user_id
        )
    );
}
```

### REST API Security
```php
// [SECURE] - All REST routes must include proper permission checks
class API_Controller {
    private const MANAGE_CAP = 'manage_plugin_settings';

    public function register_routes(): void {
        register_rest_route('plugin/v1', '/settings', [
            'methods' => 'POST',
            'callback' => [$this, 'update_settings'],
            'permission_callback' => [$this, 'can_manage'], // [SECURE]
            'args' => [
                'option' => [
                    'required' => true,
                    'sanitize_callback' => 'sanitize_text_field' // [SECURE]
                ]
            ]
        ]);
    }

    public static function can_manage(): bool { // [SECURE]
        return current_user_can(self::MANAGE_CAP); // [SECURE]
    }
}
```

## Modern WordPress Features

### Gutenberg Block Development
```php
// Modern block registration
class Custom_Block {
    public function register(): void {
        register_block_type('plugin/custom-block', [
            'api_version' => 3,
            'editor_script' => 'plugin-editor-script',
            'render_callback' => [$this, 'render_block'],
            'attributes' => [
                'content' => [
                    'type' => 'string',
                    'default' => ''
                ]
            ]
        ]);
    }

    public function render_block(array $attributes): string {
        return sprintf(
            '<div class="wp-block-plugin-custom-block">%s</div>',
            esc_html($attributes['content'] ?? '')
        );
    }
}
```

### Block Theme Development
```php
// theme.json configuration
{
    "version": 2,
    "settings": {
        "color": {
            "palette": [
                {
                    "name": "Primary",
                    "slug": "primary",
                    "color": "#0073aa"
                }
            ]
        },
        "typography": {
            "fontSizes": [
                {
                    "name": "Small",
                    "slug": "small",
                    "size": "0.875rem"
                }
            ]
        }
    }
}
```

### WordPress Interactivity API
```javascript
// Modern interactive blocks
import { store } from '@wordpress/interactivity';

store({
    actions: {
        toggleVisibility: ({ state }) => {
            state.isVisible = !state.isVisible;
        }
    },
    selectors: {
        isHidden: ({ state }) => !state.isVisible
    }
});
```

## Performance & Optimization

### Caching Strategies
```php
// Utilize WordPress caching APIs
class Performance_Optimizer {
    public function get_cached_data(string $key): mixed {
        $cached = wp_cache_get($key, 'plugin_namespace');

        if (false !== $cached) {
            return $cached;
        }

        $data = $this->expensive_operation();
        wp_cache_set($key, $data, 'plugin_namespace', HOUR_IN_SECONDS);

        return $data;
    }

    // Use transients for longer-term caching
    public function get_transient_data(string $key): mixed {
        return get_transient("plugin_{$key}");
    }
}
```

### Asset Management
```php
// Proper asset enqueueing
class Asset_Manager {
    public function enqueue_assets(): void {
        wp_enqueue_script(
            'plugin-script',
            PLUGIN_URL . '/assets/script.js',
            array('wp-dom-ready', 'wp-api-fetch'),
            PLUGIN_VERSION,
            true
        );

        wp_enqueue_style(
            'plugin-style',
            PLUGIN_URL . '/assets/style.css',
            array(),
            PLUGIN_VERSION
        );

        wp_localize_script('plugin-script', 'pluginData', array(
            'ajaxUrl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('plugin_action'),
            'restUrl' => rest_url('plugin/v1/')
        ));
    }
}
```

## Testing & Quality Assurance

### Unit Testing
```php
// WordPress unit tests
class Plugin_Test extends WP_UnitTestCase {
    public function test_plugin_initialization(): void {
        $plugin = new Plugin();
        $this->assertTrue($plugin->is_initialized());
    }

    public function test_data_validation(): void {
        $validator = new Data_Validator();

        $this->assertTrue($validator->is_valid_email('test@example.com'));
        $this->assertFalse($validator->is_valid_email('invalid-email'));
    }
}
```

### Integration Testing
```php
// Test WordPress hooks and filters
public function test_hook_integration(): void {
    $handler = new Hook_Handler();

    // Test that our filter is properly registered
    $this->assertEquals(
        10,
        has_filter('the_content', [$handler, 'content_filter'])
    );
}
```

## Documentation & Code Comments

### PHPDoc Standards
```php
/**
 * Handles plugin settings management with validation and security.
 *
 * This class provides a secure interface for managing plugin configuration
 * with proper input sanitization and capability checks.
 *
 * @since 1.0.0
 * @package Plugin_Name\Core
 */
class Settings_Manager {
    /**
     * Updates plugin settings with validation.
     *
     * Validates and sanitizes all input data before saving to prevent
     * security vulnerabilities and data corruption.
     *
     * @param array $new_settings New settings to save
     * @return bool True on success, false on failure
     * @throws InvalidArgumentException If settings are invalid
     */
    public function update_settings(array $new_settings): bool {
        // Implementation
    }
}
```

## Dependencies & Tooling

### Composer Integration
```json
{
    "name": "vendor/plugin-name",
    "require": {
        "php": ">=8.1",
        "composer/installers": "^2.0"
    },
    "autoload": {
        "psr-4": {
            "PluginName\\": "includes/"
        }
    }
}
```

### JavaScript/React Development
```javascript
// Modern ES6+ with WordPress packages
import { useState, useEffect } from '@wordpress/element';
import { Button, TextControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';

const SettingsPanel = () => {
    const [settings, setSettings] = useState({});

    useEffect(() => {
        // Load settings via REST API
        wp.apiFetch({ path: '/plugin/v1/settings' })
            .then(setSettings)
            .catch(console.error);
    }, array());

    return (
        <div className="settings-panel">
            <TextControl
                label={__('API Key', 'plugin')}
                value={settings.apiKey || ''}
                onChange={(value) => setSettings({...settings, apiKey: value})}
            />
            <Button
                variant="primary"
                onClick={() => saveSettings(settings)}
            >
                {__('Save Settings', 'plugin')}
            </Button>
        </div>
    );
};
```

## Deployment & Maintenance

### Database Schema Management
```php
// Safe database schema updates
public function update_database(): void {
    global $wpdb;

    $charset_collate = $wpdb->get_charset_collate();

    $sql = "CREATE TABLE {$wpdb->prefix}plugin_data (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        user_id mediumint(9) NOT NULL,
        data longtext NOT NULL,
        created_at datetime DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        KEY user_id (user_id)
    ) $charset_collate;";

    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    dbDelta($sql);

    update_option('plugin_version', PLUGIN_VERSION);
}
```

### Background Processing
```php
// Use WP_Cron for scheduled tasks
class Background_Processor {
    public function schedule_cleanup(): void {
        if (!wp_next_scheduled('plugin_cleanup')) {
            wp_schedule_event(time(), 'daily', 'plugin_cleanup');
        }
    }

    public function cleanup_data(): void {
        // Perform cleanup operations
        wp_clear_scheduled_hook('plugin_cleanup');
    }
}
```

## Key Conventions Summary

1. **Security First**: Always validate and sanitize input, never trust user data
2. **WordPress Way**: Use core functions, hooks, and APIs instead of custom solutions
3. **Modern PHP**: Leverage PHP 8.2+ features for better type safety and performance
4. **Performance**: Implement caching, optimize queries, and minimize database calls
5. **Maintainable Code**: Write self-documenting code with comprehensive PHPDoc
6. **Testing**: Write unit and integration tests for all critical functionality
7. **Documentation**: Maintain comprehensive inline documentation and user guides
8. **Accessibility**: Follow WordPress accessibility guidelines for all user interfaces
9. **Internationalization**: Use WordPress i18n functions for all user-facing text
10. **Version Control**: Use semantic versioning and maintain backward compatibility